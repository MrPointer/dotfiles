# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# Use VIM as default editor
export VISUAL=vim
export EDITOR="$VISUAL"

# You may need to manually set your language environment
export LANG="en_US.UTF-8"
export LC_ALL="en_US.UTF-8"

# Ensure history is respected
HISTFILE=~/.zsh_history
HISTSIZE=10000
SAVEHIST=10000
setopt appendhistory

# Setup some stuff for oh-my-zsh plugins
export ZSH_CACHE_DIR="${XDG_CACHE_HOME:-$HOME/.cache}/"

zstyle ':completion:*' menu select
mkdir -p ~/.zfunc &>/dev/null
fpath+=~/.zfunc

{{ if .system.multi_user_system -}}
autoload -U +X compinit && compinit -u
{{- else -}}
autoload -U +X compinit && compinit
{{- end }}
autoload -U +X bashcompinit && bashcompinit

autoload -U select-word-style
select-word-style bash

# Enable homebrew completions
if command -v brew &>/dev/null; then
  FPATH="$BREW_HOME/share/zsh/site-functions:$FPATH"
fi

# Custom git aliases
alias gmv="git mv"

if command -v nvim &>/dev/null; then
  alias vi="nvim"
  alias vim="nvim"
fi

if [[ -d "$HOME/.pyenv" ]]; then
    # Enable pyenv
    export PYENV_ROOT="$HOME/.pyenv"
    export PATH="$PYENV_ROOT/bin:$PATH"
    eval "$(pyenv init --path)"
    eval "$(pyenv init -)"
    eval "$(pyenv virtualenv-init -)"
fi

if command -v cargo &>/dev/null; then
    # Add Cargo's bin dir to make cargo (rust) execs available
    export PATH="$PATH:$HOME/.cargo/bin"
    
    # Register cargo completions via rustup (if available)
    if command -v rustup &>/dev/null; then
        rustup completions zsh cargo > ~/.zfunc/_cargo
    fi
fi

if command -v go &>/dev/null; then
    # Add Go's bin dir to make go execs available
    export PATH="$PATH:$HOME/go/bin"
fi

if [[ -d "$BREW_HOME/lib/ruby" ]]; then
    # Add Ruby's exec dir to make Ruby execs available
    export PATH="$PATH:$BREW_HOME/lib/ruby/gems/3.1.0/bin"
fi

if [[ -d "$BREW_HOME/opt/clang-format" ]]; then
    export PATH="$BREW_HOME/opt/clang-format/bin:$PATH"
fi

if command -v pipx &>/dev/null; then
  # Register pipx completions
  eval "$(register-python-argcomplete pipx)"
fi

if command -v poetry &>/dev/null; then
  # Register poetry completions
  poetry completions zsh > ~/.zfunc/_poetry
fi

if command -v chezmoi &>/dev/null; then
  # Register chezmoi completions
  chezmoi completion zsh --output ~/.zfunc/_chezmoi
fi

if command -v npm &>/dev/null; then
  # Register npm completions
  npm completion > ~/.zfunc/_npm
fi

if command -v task &>/dev/null; then
  # Register go-task completions
  eval "$(task --completion zsh)"
fi

if command -v jfrog &>/dev/null; then
  # Register jfrog-cli completions
  local jfrog_completions="~/.jfrog/jfrog_zsh_completions"
  if [[ ! -f "${jfrog_completions}" ]]; then
    jfrog completion zsh --install >/dev/null
  fi
  source ~/.jfrog/jfrog_zsh_completion
fi

if command -v az &>/dev/null; then
  # Register Azure-DevOps completions
  source $(brew --prefix)/etc/bash_completion.d/az
fi

{{ if .personal.work_env -}}
source "$WORK_ZSH_RC_EXTENSION"
{{- end }}

function load_zsh_function {
  local func_name="$1"
  local func_path="$HOME/.local/share/zsh/functions/${func_name}.zsh"
  if [[ -f "${func_path}" ]]; then
    source "${func_path}"
  fi
}

function load_custom_plugin {
  local plugin_name="$1"
  local plugin_path="$HOME/.local/share/zsh/plugins/${plugin_name}"
  if [[ -d "${plugin_path}" ]]; then
    source "${plugin_path}/${plugin_name}.plugin.zsh"
  fi
}

# Load some oh-my-zsh functions
load_zsh_function "git"

# Load some oh-my-zsh plugins
load_custom_plugin "key-bindings"
load_custom_plugin "git"
load_custom_plugin "dotenv"

# Don't pollute the global namespace with a function that isn't necessary anymore
unfunction load_custom_plugin
unfunction load_zsh_function

# Load plugins with sheldon (The list of plugins is in ~/.config/sheldon/plugins.toml)
eval "$(sheldon source)"

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

# Configure fzf stuff, including fzf-tab
local fzf_path
fzf_path="$(command -v fzf)"
if [[ -n "$fzf_path" ]]; then
  if [[ ! -f ~/.fzf.zsh ]]; then
    # fzf completions are missing, generate them
    if [[ "$fzf_path" =~ brew ]]; then
      # fzf is installed with brew
      "$BREW_HOME/opt/fzf/install"
    fi
  fi

  if command -v fd &>/dev/null; then
    export FZF_DEFAULT_COMMAND="fd --type f --color=never --hidden --follow --exclude .git"
  fi
  
  export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
  source <(fzf --zsh)
fi
unset fzf_path

# disable sort when completing `git checkout`
zstyle ':completion:*:git-checkout:*' sort false
# set descriptions format to enable group support
# NOTE: don't use escape sequences (like '%F{red}%d%f') here, fzf-tab will ignore them
zstyle ':completion:*:descriptions' format '[%d]'
# set list-colors to enable filename colorizing
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}
# force zsh not to show completion menu, which allows fzf-tab to capture the unambiguous prefix
zstyle ':completion:*' menu no
# preview directory's content with eza when completing cd
zstyle ':fzf-tab:complete:cd:*' fzf-preview 'eza -1 --color=always $realpath'
# custom fzf flags
# NOTE: fzf-tab does not follow FZF_DEFAULT_OPTS by default
zstyle ':fzf-tab:*' fzf-flags --color=fg:1,fg+:2 --bind=tab:accept
# To make fzf-tab follow FZF_DEFAULT_OPTS.
# NOTE: This may lead to unexpected behavior since some flags break this plugin. See Aloxaf/fzf-tab#455.
zstyle ':fzf-tab:*' use-fzf-default-opts yes
# switch group using `<` and `>`
zstyle ':fzf-tab:*' switch-group '<' '>'
# Disable continuous completion
zstyle ':fzf-tab:*' continuous-trigger ''

# Enable rich shell integration for VSCode
if [[ "$TERM_PROGRAM" == "vscode" ]]; then
  # Disable suggestions (for now)
  export VSCODE_SUGGEST=0
  {{ if (eq .chezmoi.os "darwin") -}}
  . "/Applications/Visual Studio Code.app/Contents/Resources/app/out/vs/workbench/contrib/terminal/common/scripts/shellIntegration-rc.zsh"
  {{- else -}}
  if command -v code &>/dev/null; then
    . "$(code --locate-shell-integration-path zsh)"
  fi
  {{- end }}
fi

# Reload zsh completions
compinit

function nvm_auto_use() {
    local node_version="$(nvm version)"
    local nvmrc_path="$(nvm_find_nvmrc)"

    if [ -n "$nvmrc_path" ]; then
        local nvmrc_node_version=$(nvm version "$(cat "${nvmrc_path}")")

        if [ "$nvmrc_node_version" = "N/A" ]; then
            nvm install
        elif [ "$nvmrc_node_version" != "$node_version" ]; then
            nvm use
        fi
    elif [ "$node_version" != "$(nvm version default)" ]; then
        echo "Reverting to nvm default version"
        nvm use default
    fi
}

if [[ -f "$BREW_HOME/opt/nvm/nvm.sh" ]]; then
    source "$BREW_HOME/opt/nvm/nvm.sh"

    autoload -U add-zsh-hook
    add-zsh-hook chpwd nvm_auto_use
    nvm_auto_use
fi
