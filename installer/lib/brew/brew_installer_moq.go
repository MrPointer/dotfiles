// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package brew

import (
	"sync"
)

// Ensure, that BrewInstallerMock does implement BrewInstaller.
// If this is not the case, regenerate this file with moq.
var _ BrewInstaller = &BrewInstallerMock{}

// BrewInstallerMock is a mock implementation of BrewInstaller.
//
//	func TestSomethingThatUsesBrewInstaller(t *testing.T) {
//
//		// make and configure a mocked BrewInstaller
//		mockedBrewInstaller := &BrewInstallerMock{
//			DetectBrewPathFunc: func() (string, error) {
//				panic("mock out the DetectBrewPath method")
//			},
//			InstallFunc: func() error {
//				panic("mock out the Install method")
//			},
//			IsAvailableFunc: func() (bool, error) {
//				panic("mock out the IsAvailable method")
//			},
//		}
//
//		// use mockedBrewInstaller in code that requires BrewInstaller
//		// and then make assertions.
//
//	}
type BrewInstallerMock struct {
	// DetectBrewPathFunc mocks the DetectBrewPath method.
	DetectBrewPathFunc func() (string, error)

	// InstallFunc mocks the Install method.
	InstallFunc func() error

	// IsAvailableFunc mocks the IsAvailable method.
	IsAvailableFunc func() (bool, error)

	// calls tracks calls to the methods.
	calls struct {
		// DetectBrewPath holds details about calls to the DetectBrewPath method.
		DetectBrewPath []struct {
		}
		// Install holds details about calls to the Install method.
		Install []struct {
		}
		// IsAvailable holds details about calls to the IsAvailable method.
		IsAvailable []struct {
		}
	}
	lockDetectBrewPath sync.RWMutex
	lockInstall        sync.RWMutex
	lockIsAvailable    sync.RWMutex
}

// DetectBrewPath calls DetectBrewPathFunc.
func (mock *BrewInstallerMock) DetectBrewPath() (string, error) {
	if mock.DetectBrewPathFunc == nil {
		panic("BrewInstallerMock.DetectBrewPathFunc: method is nil but BrewInstaller.DetectBrewPath was just called")
	}
	callInfo := struct {
	}{}
	mock.lockDetectBrewPath.Lock()
	mock.calls.DetectBrewPath = append(mock.calls.DetectBrewPath, callInfo)
	mock.lockDetectBrewPath.Unlock()
	return mock.DetectBrewPathFunc()
}

// DetectBrewPathCalls gets all the calls that were made to DetectBrewPath.
// Check the length with:
//
//	len(mockedBrewInstaller.DetectBrewPathCalls())
func (mock *BrewInstallerMock) DetectBrewPathCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockDetectBrewPath.RLock()
	calls = mock.calls.DetectBrewPath
	mock.lockDetectBrewPath.RUnlock()
	return calls
}

// Install calls InstallFunc.
func (mock *BrewInstallerMock) Install() error {
	if mock.InstallFunc == nil {
		panic("BrewInstallerMock.InstallFunc: method is nil but BrewInstaller.Install was just called")
	}
	callInfo := struct {
	}{}
	mock.lockInstall.Lock()
	mock.calls.Install = append(mock.calls.Install, callInfo)
	mock.lockInstall.Unlock()
	return mock.InstallFunc()
}

// InstallCalls gets all the calls that were made to Install.
// Check the length with:
//
//	len(mockedBrewInstaller.InstallCalls())
func (mock *BrewInstallerMock) InstallCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockInstall.RLock()
	calls = mock.calls.Install
	mock.lockInstall.RUnlock()
	return calls
}

// IsAvailable calls IsAvailableFunc.
func (mock *BrewInstallerMock) IsAvailable() (bool, error) {
	if mock.IsAvailableFunc == nil {
		panic("BrewInstallerMock.IsAvailableFunc: method is nil but BrewInstaller.IsAvailable was just called")
	}
	callInfo := struct {
	}{}
	mock.lockIsAvailable.Lock()
	mock.calls.IsAvailable = append(mock.calls.IsAvailable, callInfo)
	mock.lockIsAvailable.Unlock()
	return mock.IsAvailableFunc()
}

// IsAvailableCalls gets all the calls that were made to IsAvailable.
// Check the length with:
//
//	len(mockedBrewInstaller.IsAvailableCalls())
func (mock *BrewInstallerMock) IsAvailableCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockIsAvailable.RLock()
	calls = mock.calls.IsAvailable
	mock.lockIsAvailable.RUnlock()
	return calls
}
