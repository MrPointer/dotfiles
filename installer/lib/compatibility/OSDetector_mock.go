// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: matryer

package compatibility

import (
	"sync"
)

// Ensure that MoqOSDetector does implement OSDetector.
// If this is not the case, regenerate this file with mockery.
var _ OSDetector = &MoqOSDetector{}

// MoqOSDetector is a mock implementation of OSDetector.
//
//	func TestSomethingThatUsesOSDetector(t *testing.T) {
//
//		// make and configure a mocked OSDetector
//		mockedOSDetector := &MoqOSDetector{
//			DetectSystemFunc: func() (SystemInfo, error) {
//				panic("mock out the DetectSystem method")
//			},
//			GetDistroNameFunc: func() string {
//				panic("mock out the GetDistroName method")
//			},
//			GetOSNameFunc: func() string {
//				panic("mock out the GetOSName method")
//			},
//		}
//
//		// use mockedOSDetector in code that requires OSDetector
//		// and then make assertions.
//
//	}
type MoqOSDetector struct {
	// DetectSystemFunc mocks the DetectSystem method.
	DetectSystemFunc func() (SystemInfo, error)

	// GetDistroNameFunc mocks the GetDistroName method.
	GetDistroNameFunc func() string

	// GetOSNameFunc mocks the GetOSName method.
	GetOSNameFunc func() string

	// calls tracks calls to the methods.
	calls struct {
		// DetectSystem holds details about calls to the DetectSystem method.
		DetectSystem []struct {
		}
		// GetDistroName holds details about calls to the GetDistroName method.
		GetDistroName []struct {
		}
		// GetOSName holds details about calls to the GetOSName method.
		GetOSName []struct {
		}
	}
	lockDetectSystem  sync.RWMutex
	lockGetDistroName sync.RWMutex
	lockGetOSName     sync.RWMutex
}

// DetectSystem calls DetectSystemFunc.
func (mock *MoqOSDetector) DetectSystem() (SystemInfo, error) {
	if mock.DetectSystemFunc == nil {
		panic("MoqOSDetector.DetectSystemFunc: method is nil but OSDetector.DetectSystem was just called")
	}
	callInfo := struct {
	}{}
	mock.lockDetectSystem.Lock()
	mock.calls.DetectSystem = append(mock.calls.DetectSystem, callInfo)
	mock.lockDetectSystem.Unlock()
	return mock.DetectSystemFunc()
}

// DetectSystemCalls gets all the calls that were made to DetectSystem.
// Check the length with:
//
//	len(mockedOSDetector.DetectSystemCalls())
func (mock *MoqOSDetector) DetectSystemCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockDetectSystem.RLock()
	calls = mock.calls.DetectSystem
	mock.lockDetectSystem.RUnlock()
	return calls
}

// GetDistroName calls GetDistroNameFunc.
func (mock *MoqOSDetector) GetDistroName() string {
	if mock.GetDistroNameFunc == nil {
		panic("MoqOSDetector.GetDistroNameFunc: method is nil but OSDetector.GetDistroName was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetDistroName.Lock()
	mock.calls.GetDistroName = append(mock.calls.GetDistroName, callInfo)
	mock.lockGetDistroName.Unlock()
	return mock.GetDistroNameFunc()
}

// GetDistroNameCalls gets all the calls that were made to GetDistroName.
// Check the length with:
//
//	len(mockedOSDetector.GetDistroNameCalls())
func (mock *MoqOSDetector) GetDistroNameCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetDistroName.RLock()
	calls = mock.calls.GetDistroName
	mock.lockGetDistroName.RUnlock()
	return calls
}

// GetOSName calls GetOSNameFunc.
func (mock *MoqOSDetector) GetOSName() string {
	if mock.GetOSNameFunc == nil {
		panic("MoqOSDetector.GetOSNameFunc: method is nil but OSDetector.GetOSName was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetOSName.Lock()
	mock.calls.GetOSName = append(mock.calls.GetOSName, callInfo)
	mock.lockGetOSName.Unlock()
	return mock.GetOSNameFunc()
}

// GetOSNameCalls gets all the calls that were made to GetOSName.
// Check the length with:
//
//	len(mockedOSDetector.GetOSNameCalls())
func (mock *MoqOSDetector) GetOSNameCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetOSName.RLock()
	calls = mock.calls.GetOSName
	mock.lockGetOSName.RUnlock()
	return calls
}
