// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: matryer

package dotfilesmanager

import (
	"sync"
)

// Ensure that MoqDotfilesApplier does implement DotfilesApplier.
// If this is not the case, regenerate this file with mockery.
var _ DotfilesApplier = &MoqDotfilesApplier{}

// MoqDotfilesApplier is a mock implementation of DotfilesApplier.
//
//	func TestSomethingThatUsesDotfilesApplier(t *testing.T) {
//
//		// make and configure a mocked DotfilesApplier
//		mockedDotfilesApplier := &MoqDotfilesApplier{
//			ApplyFunc: func() error {
//				panic("mock out the Apply method")
//			},
//		}
//
//		// use mockedDotfilesApplier in code that requires DotfilesApplier
//		// and then make assertions.
//
//	}
type MoqDotfilesApplier struct {
	// ApplyFunc mocks the Apply method.
	ApplyFunc func() error

	// calls tracks calls to the methods.
	calls struct {
		// Apply holds details about calls to the Apply method.
		Apply []struct {
		}
	}
	lockApply sync.RWMutex
}

// Apply calls ApplyFunc.
func (mock *MoqDotfilesApplier) Apply() error {
	if mock.ApplyFunc == nil {
		panic("MoqDotfilesApplier.ApplyFunc: method is nil but DotfilesApplier.Apply was just called")
	}
	callInfo := struct {
	}{}
	mock.lockApply.Lock()
	mock.calls.Apply = append(mock.calls.Apply, callInfo)
	mock.lockApply.Unlock()
	return mock.ApplyFunc()
}

// ApplyCalls gets all the calls that were made to Apply.
// Check the length with:
//
//	len(mockedDotfilesApplier.ApplyCalls())
func (mock *MoqDotfilesApplier) ApplyCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockApply.RLock()
	calls = mock.calls.Apply
	mock.lockApply.RUnlock()
	return calls
}
