// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: matryer

package dotfilesmanager

import (
	"sync"
)

// Ensure that MoqDotfilesDataInitializer does implement DotfilesDataInitializer.
// If this is not the case, regenerate this file with mockery.
var _ DotfilesDataInitializer = &MoqDotfilesDataInitializer{}

// MoqDotfilesDataInitializer is a mock implementation of DotfilesDataInitializer.
//
//	func TestSomethingThatUsesDotfilesDataInitializer(t *testing.T) {
//
//		// make and configure a mocked DotfilesDataInitializer
//		mockedDotfilesDataInitializer := &MoqDotfilesDataInitializer{
//			InitializeFunc: func(data DotfilesData) error {
//				panic("mock out the Initialize method")
//			},
//		}
//
//		// use mockedDotfilesDataInitializer in code that requires DotfilesDataInitializer
//		// and then make assertions.
//
//	}
type MoqDotfilesDataInitializer struct {
	// InitializeFunc mocks the Initialize method.
	InitializeFunc func(data DotfilesData) error

	// calls tracks calls to the methods.
	calls struct {
		// Initialize holds details about calls to the Initialize method.
		Initialize []struct {
			// Data is the data argument value.
			Data DotfilesData
		}
	}
	lockInitialize sync.RWMutex
}

// Initialize calls InitializeFunc.
func (mock *MoqDotfilesDataInitializer) Initialize(data DotfilesData) error {
	if mock.InitializeFunc == nil {
		panic("MoqDotfilesDataInitializer.InitializeFunc: method is nil but DotfilesDataInitializer.Initialize was just called")
	}
	callInfo := struct {
		Data DotfilesData
	}{
		Data: data,
	}
	mock.lockInitialize.Lock()
	mock.calls.Initialize = append(mock.calls.Initialize, callInfo)
	mock.lockInitialize.Unlock()
	return mock.InitializeFunc(data)
}

// InitializeCalls gets all the calls that were made to Initialize.
// Check the length with:
//
//	len(mockedDotfilesDataInitializer.InitializeCalls())
func (mock *MoqDotfilesDataInitializer) InitializeCalls() []struct {
	Data DotfilesData
} {
	var calls []struct {
		Data DotfilesData
	}
	mock.lockInitialize.RLock()
	calls = mock.calls.Initialize
	mock.lockInitialize.RUnlock()
	return calls
}
