// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: matryer

package dotfilesmanager

import (
	"sync"
)

// Ensure that MoqDotfilesInstaller does implement DotfilesInstaller.
// If this is not the case, regenerate this file with mockery.
var _ DotfilesInstaller = &MoqDotfilesInstaller{}

// MoqDotfilesInstaller is a mock implementation of DotfilesInstaller.
//
//	func TestSomethingThatUsesDotfilesInstaller(t *testing.T) {
//
//		// make and configure a mocked DotfilesInstaller
//		mockedDotfilesInstaller := &MoqDotfilesInstaller{
//			InstallFunc: func() error {
//				panic("mock out the Install method")
//			},
//		}
//
//		// use mockedDotfilesInstaller in code that requires DotfilesInstaller
//		// and then make assertions.
//
//	}
type MoqDotfilesInstaller struct {
	// InstallFunc mocks the Install method.
	InstallFunc func() error

	// calls tracks calls to the methods.
	calls struct {
		// Install holds details about calls to the Install method.
		Install []struct {
		}
	}
	lockInstall sync.RWMutex
}

// Install calls InstallFunc.
func (mock *MoqDotfilesInstaller) Install() error {
	if mock.InstallFunc == nil {
		panic("MoqDotfilesInstaller.InstallFunc: method is nil but DotfilesInstaller.Install was just called")
	}
	callInfo := struct {
	}{}
	mock.lockInstall.Lock()
	mock.calls.Install = append(mock.calls.Install, callInfo)
	mock.lockInstall.Unlock()
	return mock.InstallFunc()
}

// InstallCalls gets all the calls that were made to Install.
// Check the length with:
//
//	len(mockedDotfilesInstaller.InstallCalls())
func (mock *MoqDotfilesInstaller) InstallCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockInstall.RLock()
	calls = mock.calls.Install
	mock.lockInstall.RUnlock()
	return calls
}
