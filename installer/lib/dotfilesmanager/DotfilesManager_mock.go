// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: matryer

package dotfilesmanager

import (
	"sync"
)

// Ensure that MoqDotfilesManager does implement DotfilesManager.
// If this is not the case, regenerate this file with mockery.
var _ DotfilesManager = &MoqDotfilesManager{}

// MoqDotfilesManager is a mock implementation of DotfilesManager.
//
//	func TestSomethingThatUsesDotfilesManager(t *testing.T) {
//
//		// make and configure a mocked DotfilesManager
//		mockedDotfilesManager := &MoqDotfilesManager{
//			ApplyFunc: func() error {
//				panic("mock out the Apply method")
//			},
//			InitializeFunc: func(data DotfilesData) error {
//				panic("mock out the Initialize method")
//			},
//			InstallFunc: func() error {
//				panic("mock out the Install method")
//			},
//		}
//
//		// use mockedDotfilesManager in code that requires DotfilesManager
//		// and then make assertions.
//
//	}
type MoqDotfilesManager struct {
	// ApplyFunc mocks the Apply method.
	ApplyFunc func() error

	// InitializeFunc mocks the Initialize method.
	InitializeFunc func(data DotfilesData) error

	// InstallFunc mocks the Install method.
	InstallFunc func() error

	// calls tracks calls to the methods.
	calls struct {
		// Apply holds details about calls to the Apply method.
		Apply []struct {
		}
		// Initialize holds details about calls to the Initialize method.
		Initialize []struct {
			// Data is the data argument value.
			Data DotfilesData
		}
		// Install holds details about calls to the Install method.
		Install []struct {
		}
	}
	lockApply      sync.RWMutex
	lockInitialize sync.RWMutex
	lockInstall    sync.RWMutex
}

// Apply calls ApplyFunc.
func (mock *MoqDotfilesManager) Apply() error {
	if mock.ApplyFunc == nil {
		panic("MoqDotfilesManager.ApplyFunc: method is nil but DotfilesManager.Apply was just called")
	}
	callInfo := struct {
	}{}
	mock.lockApply.Lock()
	mock.calls.Apply = append(mock.calls.Apply, callInfo)
	mock.lockApply.Unlock()
	return mock.ApplyFunc()
}

// ApplyCalls gets all the calls that were made to Apply.
// Check the length with:
//
//	len(mockedDotfilesManager.ApplyCalls())
func (mock *MoqDotfilesManager) ApplyCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockApply.RLock()
	calls = mock.calls.Apply
	mock.lockApply.RUnlock()
	return calls
}

// Initialize calls InitializeFunc.
func (mock *MoqDotfilesManager) Initialize(data DotfilesData) error {
	if mock.InitializeFunc == nil {
		panic("MoqDotfilesManager.InitializeFunc: method is nil but DotfilesManager.Initialize was just called")
	}
	callInfo := struct {
		Data DotfilesData
	}{
		Data: data,
	}
	mock.lockInitialize.Lock()
	mock.calls.Initialize = append(mock.calls.Initialize, callInfo)
	mock.lockInitialize.Unlock()
	return mock.InitializeFunc(data)
}

// InitializeCalls gets all the calls that were made to Initialize.
// Check the length with:
//
//	len(mockedDotfilesManager.InitializeCalls())
func (mock *MoqDotfilesManager) InitializeCalls() []struct {
	Data DotfilesData
} {
	var calls []struct {
		Data DotfilesData
	}
	mock.lockInitialize.RLock()
	calls = mock.calls.Initialize
	mock.lockInitialize.RUnlock()
	return calls
}

// Install calls InstallFunc.
func (mock *MoqDotfilesManager) Install() error {
	if mock.InstallFunc == nil {
		panic("MoqDotfilesManager.InstallFunc: method is nil but DotfilesManager.Install was just called")
	}
	callInfo := struct {
	}{}
	mock.lockInstall.Lock()
	mock.calls.Install = append(mock.calls.Install, callInfo)
	mock.lockInstall.Unlock()
	return mock.InstallFunc()
}

// InstallCalls gets all the calls that were made to Install.
// Check the length with:
//
//	len(mockedDotfilesManager.InstallCalls())
func (mock *MoqDotfilesManager) InstallCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockInstall.RLock()
	calls = mock.calls.Install
	mock.lockInstall.RUnlock()
	return calls
}
