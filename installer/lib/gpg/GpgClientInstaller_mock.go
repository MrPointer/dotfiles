// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: matryer

package gpg

import (
	"context"
	"sync"
)

// Ensure that MoqGpgClientInstaller does implement GpgClientInstaller.
// If this is not the case, regenerate this file with mockery.
var _ GpgClientInstaller = &MoqGpgClientInstaller{}

// MoqGpgClientInstaller is a mock implementation of GpgClientInstaller.
//
//	func TestSomethingThatUsesGpgClientInstaller(t *testing.T) {
//
//		// make and configure a mocked GpgClientInstaller
//		mockedGpgClientInstaller := &MoqGpgClientInstaller{
//			InstallFunc: func(ctx context.Context) error {
//				panic("mock out the Install method")
//			},
//			IsAvailableFunc: func() (bool, error) {
//				panic("mock out the IsAvailable method")
//			},
//		}
//
//		// use mockedGpgClientInstaller in code that requires GpgClientInstaller
//		// and then make assertions.
//
//	}
type MoqGpgClientInstaller struct {
	// InstallFunc mocks the Install method.
	InstallFunc func(ctx context.Context) error

	// IsAvailableFunc mocks the IsAvailable method.
	IsAvailableFunc func() (bool, error)

	// calls tracks calls to the methods.
	calls struct {
		// Install holds details about calls to the Install method.
		Install []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// IsAvailable holds details about calls to the IsAvailable method.
		IsAvailable []struct {
		}
	}
	lockInstall     sync.RWMutex
	lockIsAvailable sync.RWMutex
}

// Install calls InstallFunc.
func (mock *MoqGpgClientInstaller) Install(ctx context.Context) error {
	if mock.InstallFunc == nil {
		panic("MoqGpgClientInstaller.InstallFunc: method is nil but GpgClientInstaller.Install was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockInstall.Lock()
	mock.calls.Install = append(mock.calls.Install, callInfo)
	mock.lockInstall.Unlock()
	return mock.InstallFunc(ctx)
}

// InstallCalls gets all the calls that were made to Install.
// Check the length with:
//
//	len(mockedGpgClientInstaller.InstallCalls())
func (mock *MoqGpgClientInstaller) InstallCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockInstall.RLock()
	calls = mock.calls.Install
	mock.lockInstall.RUnlock()
	return calls
}

// IsAvailable calls IsAvailableFunc.
func (mock *MoqGpgClientInstaller) IsAvailable() (bool, error) {
	if mock.IsAvailableFunc == nil {
		panic("MoqGpgClientInstaller.IsAvailableFunc: method is nil but GpgClientInstaller.IsAvailable was just called")
	}
	callInfo := struct {
	}{}
	mock.lockIsAvailable.Lock()
	mock.calls.IsAvailable = append(mock.calls.IsAvailable, callInfo)
	mock.lockIsAvailable.Unlock()
	return mock.IsAvailableFunc()
}

// IsAvailableCalls gets all the calls that were made to IsAvailable.
// Check the length with:
//
//	len(mockedGpgClientInstaller.IsAvailableCalls())
func (mock *MoqGpgClientInstaller) IsAvailableCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockIsAvailable.RLock()
	calls = mock.calls.IsAvailable
	mock.lockIsAvailable.RUnlock()
	return calls
}
