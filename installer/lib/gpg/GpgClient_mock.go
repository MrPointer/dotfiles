// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: matryer

package gpg

import (
	"sync"
)

// Ensure that MoqGpgClient does implement GpgClient.
// If this is not the case, regenerate this file with mockery.
var _ GpgClient = &MoqGpgClient{}

// MoqGpgClient is a mock implementation of GpgClient.
//
//	func TestSomethingThatUsesGpgClient(t *testing.T) {
//
//		// make and configure a mocked GpgClient
//		mockedGpgClient := &MoqGpgClient{
//			CreateKeyPairFunc: func() (string, error) {
//				panic("mock out the CreateKeyPair method")
//			},
//			KeysAvailableFunc: func() (bool, error) {
//				panic("mock out the KeysAvailable method")
//			},
//			ListAvailableKeysFunc: func() ([]string, error) {
//				panic("mock out the ListAvailableKeys method")
//			},
//		}
//
//		// use mockedGpgClient in code that requires GpgClient
//		// and then make assertions.
//
//	}
type MoqGpgClient struct {
	// CreateKeyPairFunc mocks the CreateKeyPair method.
	CreateKeyPairFunc func() (string, error)

	// KeysAvailableFunc mocks the KeysAvailable method.
	KeysAvailableFunc func() (bool, error)

	// ListAvailableKeysFunc mocks the ListAvailableKeys method.
	ListAvailableKeysFunc func() ([]string, error)

	// calls tracks calls to the methods.
	calls struct {
		// CreateKeyPair holds details about calls to the CreateKeyPair method.
		CreateKeyPair []struct {
		}
		// KeysAvailable holds details about calls to the KeysAvailable method.
		KeysAvailable []struct {
		}
		// ListAvailableKeys holds details about calls to the ListAvailableKeys method.
		ListAvailableKeys []struct {
		}
	}
	lockCreateKeyPair     sync.RWMutex
	lockKeysAvailable     sync.RWMutex
	lockListAvailableKeys sync.RWMutex
}

// CreateKeyPair calls CreateKeyPairFunc.
func (mock *MoqGpgClient) CreateKeyPair() (string, error) {
	if mock.CreateKeyPairFunc == nil {
		panic("MoqGpgClient.CreateKeyPairFunc: method is nil but GpgClient.CreateKeyPair was just called")
	}
	callInfo := struct {
	}{}
	mock.lockCreateKeyPair.Lock()
	mock.calls.CreateKeyPair = append(mock.calls.CreateKeyPair, callInfo)
	mock.lockCreateKeyPair.Unlock()
	return mock.CreateKeyPairFunc()
}

// CreateKeyPairCalls gets all the calls that were made to CreateKeyPair.
// Check the length with:
//
//	len(mockedGpgClient.CreateKeyPairCalls())
func (mock *MoqGpgClient) CreateKeyPairCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockCreateKeyPair.RLock()
	calls = mock.calls.CreateKeyPair
	mock.lockCreateKeyPair.RUnlock()
	return calls
}

// KeysAvailable calls KeysAvailableFunc.
func (mock *MoqGpgClient) KeysAvailable() (bool, error) {
	if mock.KeysAvailableFunc == nil {
		panic("MoqGpgClient.KeysAvailableFunc: method is nil but GpgClient.KeysAvailable was just called")
	}
	callInfo := struct {
	}{}
	mock.lockKeysAvailable.Lock()
	mock.calls.KeysAvailable = append(mock.calls.KeysAvailable, callInfo)
	mock.lockKeysAvailable.Unlock()
	return mock.KeysAvailableFunc()
}

// KeysAvailableCalls gets all the calls that were made to KeysAvailable.
// Check the length with:
//
//	len(mockedGpgClient.KeysAvailableCalls())
func (mock *MoqGpgClient) KeysAvailableCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockKeysAvailable.RLock()
	calls = mock.calls.KeysAvailable
	mock.lockKeysAvailable.RUnlock()
	return calls
}

// ListAvailableKeys calls ListAvailableKeysFunc.
func (mock *MoqGpgClient) ListAvailableKeys() ([]string, error) {
	if mock.ListAvailableKeysFunc == nil {
		panic("MoqGpgClient.ListAvailableKeysFunc: method is nil but GpgClient.ListAvailableKeys was just called")
	}
	callInfo := struct {
	}{}
	mock.lockListAvailableKeys.Lock()
	mock.calls.ListAvailableKeys = append(mock.calls.ListAvailableKeys, callInfo)
	mock.lockListAvailableKeys.Unlock()
	return mock.ListAvailableKeysFunc()
}

// ListAvailableKeysCalls gets all the calls that were made to ListAvailableKeys.
// Check the length with:
//
//	len(mockedGpgClient.ListAvailableKeysCalls())
func (mock *MoqGpgClient) ListAvailableKeysCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockListAvailableKeys.RLock()
	calls = mock.calls.ListAvailableKeys
	mock.lockListAvailableKeys.RUnlock()
	return calls
}
