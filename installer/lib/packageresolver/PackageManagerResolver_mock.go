// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: matryer

package packageresolver

import (
	"sync"

	"github.com/MrPointer/dotfiles/installer/lib/pkgmanager"
)

// Ensure that MoqPackageManagerResolver does implement PackageManagerResolver.
// If this is not the case, regenerate this file with mockery.
var _ PackageManagerResolver = &MoqPackageManagerResolver{}

// MoqPackageManagerResolver is a mock implementation of PackageManagerResolver.
//
//	func TestSomethingThatUsesPackageManagerResolver(t *testing.T) {
//
//		// make and configure a mocked PackageManagerResolver
//		mockedPackageManagerResolver := &MoqPackageManagerResolver{
//			ResolveFunc: func(genericPackageCode string, versionConstraintString string) (pkgmanager.RequestedPackageInfo, error) {
//				panic("mock out the Resolve method")
//			},
//		}
//
//		// use mockedPackageManagerResolver in code that requires PackageManagerResolver
//		// and then make assertions.
//
//	}
type MoqPackageManagerResolver struct {
	// ResolveFunc mocks the Resolve method.
	ResolveFunc func(genericPackageCode string, versionConstraintString string) (pkgmanager.RequestedPackageInfo, error)

	// calls tracks calls to the methods.
	calls struct {
		// Resolve holds details about calls to the Resolve method.
		Resolve []struct {
			// GenericPackageCode is the genericPackageCode argument value.
			GenericPackageCode string
			// VersionConstraintString is the versionConstraintString argument value.
			VersionConstraintString string
		}
	}
	lockResolve sync.RWMutex
}

// Resolve calls ResolveFunc.
func (mock *MoqPackageManagerResolver) Resolve(genericPackageCode string, versionConstraintString string) (pkgmanager.RequestedPackageInfo, error) {
	if mock.ResolveFunc == nil {
		panic("MoqPackageManagerResolver.ResolveFunc: method is nil but PackageManagerResolver.Resolve was just called")
	}
	callInfo := struct {
		GenericPackageCode      string
		VersionConstraintString string
	}{
		GenericPackageCode:      genericPackageCode,
		VersionConstraintString: versionConstraintString,
	}
	mock.lockResolve.Lock()
	mock.calls.Resolve = append(mock.calls.Resolve, callInfo)
	mock.lockResolve.Unlock()
	return mock.ResolveFunc(genericPackageCode, versionConstraintString)
}

// ResolveCalls gets all the calls that were made to Resolve.
// Check the length with:
//
//	len(mockedPackageManagerResolver.ResolveCalls())
func (mock *MoqPackageManagerResolver) ResolveCalls() []struct {
	GenericPackageCode      string
	VersionConstraintString string
} {
	var calls []struct {
		GenericPackageCode      string
		VersionConstraintString string
	}
	mock.lockResolve.RLock()
	calls = mock.calls.Resolve
	mock.lockResolve.RUnlock()
	return calls
}
