// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: matryer

package utils

import (
	"sync"
)

// Ensure that MoqCommander does implement Commander.
// If this is not the case, regenerate this file with mockery.
var _ Commander = &MoqCommander{}

// MoqCommander is a mock implementation of Commander.
//
//	func TestSomethingThatUsesCommander(t *testing.T) {
//
//		// make and configure a mocked Commander
//		mockedCommander := &MoqCommander{
//			RunFunc: func(name string, args ...string) error {
//				panic("mock out the Run method")
//			},
//			RunWithEnvFunc: func(env map[string]string, name string, args ...string) error {
//				panic("mock out the RunWithEnv method")
//			},
//		}
//
//		// use mockedCommander in code that requires Commander
//		// and then make assertions.
//
//	}
type MoqCommander struct {
	// RunFunc mocks the Run method.
	RunFunc func(name string, args ...string) error

	// RunWithEnvFunc mocks the RunWithEnv method.
	RunWithEnvFunc func(env map[string]string, name string, args ...string) error

	// calls tracks calls to the methods.
	calls struct {
		// Run holds details about calls to the Run method.
		Run []struct {
			// Name is the name argument value.
			Name string
			// Args is the args argument value.
			Args []string
		}
		// RunWithEnv holds details about calls to the RunWithEnv method.
		RunWithEnv []struct {
			// Env is the env argument value.
			Env map[string]string
			// Name is the name argument value.
			Name string
			// Args is the args argument value.
			Args []string
		}
	}
	lockRun        sync.RWMutex
	lockRunWithEnv sync.RWMutex
}

// Run calls RunFunc.
func (mock *MoqCommander) Run(name string, args ...string) error {
	if mock.RunFunc == nil {
		panic("MoqCommander.RunFunc: method is nil but Commander.Run was just called")
	}
	callInfo := struct {
		Name string
		Args []string
	}{
		Name: name,
		Args: args,
	}
	mock.lockRun.Lock()
	mock.calls.Run = append(mock.calls.Run, callInfo)
	mock.lockRun.Unlock()
	return mock.RunFunc(name, args...)
}

// RunCalls gets all the calls that were made to Run.
// Check the length with:
//
//	len(mockedCommander.RunCalls())
func (mock *MoqCommander) RunCalls() []struct {
	Name string
	Args []string
} {
	var calls []struct {
		Name string
		Args []string
	}
	mock.lockRun.RLock()
	calls = mock.calls.Run
	mock.lockRun.RUnlock()
	return calls
}

// RunWithEnv calls RunWithEnvFunc.
func (mock *MoqCommander) RunWithEnv(env map[string]string, name string, args ...string) error {
	if mock.RunWithEnvFunc == nil {
		panic("MoqCommander.RunWithEnvFunc: method is nil but Commander.RunWithEnv was just called")
	}
	callInfo := struct {
		Env  map[string]string
		Name string
		Args []string
	}{
		Env:  env,
		Name: name,
		Args: args,
	}
	mock.lockRunWithEnv.Lock()
	mock.calls.RunWithEnv = append(mock.calls.RunWithEnv, callInfo)
	mock.lockRunWithEnv.Unlock()
	return mock.RunWithEnvFunc(env, name, args...)
}

// RunWithEnvCalls gets all the calls that were made to RunWithEnv.
// Check the length with:
//
//	len(mockedCommander.RunWithEnvCalls())
func (mock *MoqCommander) RunWithEnvCalls() []struct {
	Env  map[string]string
	Name string
	Args []string
} {
	var calls []struct {
		Env  map[string]string
		Name string
		Args []string
	}
	mock.lockRunWithEnv.RLock()
	calls = mock.calls.RunWithEnv
	mock.lockRunWithEnv.RUnlock()
	return calls
}
