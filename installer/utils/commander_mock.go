// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: matryer

package utils

import (
	"sync"
)

// Ensure that MoqCommander does implement Commander.
// If this is not the case, regenerate this file with mockery.
var _ Commander = &MoqCommander{}

// MoqCommander is a mock implementation of Commander.
//
//	func TestSomethingThatUsesCommander(t *testing.T) {
//
//		// make and configure a mocked Commander
//		mockedCommander := &MoqCommander{
//			RunCommandFunc: func(name string, args []string, opts ...Option) (*Result, error) {
//				panic("mock out the RunCommand method")
//			},
//		}
//
//		// use mockedCommander in code that requires Commander
//		// and then make assertions.
//
//	}
type MoqCommander struct {
	// RunCommandFunc mocks the RunCommand method.
	RunCommandFunc func(name string, args []string, opts ...Option) (*Result, error)

	// calls tracks calls to the methods.
	calls struct {
		// RunCommand holds details about calls to the RunCommand method.
		RunCommand []struct {
			// Name is the name argument value.
			Name string
			// Args is the args argument value.
			Args []string
			// Opts is the opts argument value.
			Opts []Option
		}
	}
	lockRunCommand sync.RWMutex
}

// RunCommand calls RunCommandFunc.
func (mock *MoqCommander) RunCommand(name string, args []string, opts ...Option) (*Result, error) {
	if mock.RunCommandFunc == nil {
		panic("MoqCommander.RunCommandFunc: method is nil but Commander.RunCommand was just called")
	}
	callInfo := struct {
		Name string
		Args []string
		Opts []Option
	}{
		Name: name,
		Args: args,
		Opts: opts,
	}
	mock.lockRunCommand.Lock()
	mock.calls.RunCommand = append(mock.calls.RunCommand, callInfo)
	mock.lockRunCommand.Unlock()
	return mock.RunCommandFunc(name, args, opts...)
}

// RunCommandCalls gets all the calls that were made to RunCommand.
// Check the length with:
//
//	len(mockedCommander.RunCommandCalls())
func (mock *MoqCommander) RunCommandCalls() []struct {
	Name string
	Args []string
	Opts []Option
} {
	var calls []struct {
		Name string
		Args []string
		Opts []Option
	}
	mock.lockRunCommand.RLock()
	calls = mock.calls.RunCommand
	mock.lockRunCommand.RUnlock()
	return calls
}
