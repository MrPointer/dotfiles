// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: matryer

package httpclient

import (
	"io"
	"net/http"
	"sync"
)

// Ensure that MoqHTTPClient does implement HTTPClient.
// If this is not the case, regenerate this file with mockery.
var _ HTTPClient = &MoqHTTPClient{}

// MoqHTTPClient is a mock implementation of HTTPClient.
//
//	func TestSomethingThatUsesHTTPClient(t *testing.T) {
//
//		// make and configure a mocked HTTPClient
//		mockedHTTPClient := &MoqHTTPClient{
//			GetFunc: func(url string) (*http.Response, error) {
//				panic("mock out the Get method")
//			},
//			PostFunc: func(url string, contentType string, body io.Reader) (*http.Response, error) {
//				panic("mock out the Post method")
//			},
//		}
//
//		// use mockedHTTPClient in code that requires HTTPClient
//		// and then make assertions.
//
//	}
type MoqHTTPClient struct {
	// GetFunc mocks the Get method.
	GetFunc func(url string) (*http.Response, error)

	// PostFunc mocks the Post method.
	PostFunc func(url string, contentType string, body io.Reader) (*http.Response, error)

	// calls tracks calls to the methods.
	calls struct {
		// Get holds details about calls to the Get method.
		Get []struct {
			// URL is the url argument value.
			URL string
		}
		// Post holds details about calls to the Post method.
		Post []struct {
			// URL is the url argument value.
			URL string
			// ContentType is the contentType argument value.
			ContentType string
			// Body is the body argument value.
			Body io.Reader
		}
	}
	lockGet  sync.RWMutex
	lockPost sync.RWMutex
}

// Get calls GetFunc.
func (mock *MoqHTTPClient) Get(url string) (*http.Response, error) {
	if mock.GetFunc == nil {
		panic("MoqHTTPClient.GetFunc: method is nil but HTTPClient.Get was just called")
	}
	callInfo := struct {
		URL string
	}{
		URL: url,
	}
	mock.lockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	mock.lockGet.Unlock()
	return mock.GetFunc(url)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//
//	len(mockedHTTPClient.GetCalls())
func (mock *MoqHTTPClient) GetCalls() []struct {
	URL string
} {
	var calls []struct {
		URL string
	}
	mock.lockGet.RLock()
	calls = mock.calls.Get
	mock.lockGet.RUnlock()
	return calls
}

// Post calls PostFunc.
func (mock *MoqHTTPClient) Post(url string, contentType string, body io.Reader) (*http.Response, error) {
	if mock.PostFunc == nil {
		panic("MoqHTTPClient.PostFunc: method is nil but HTTPClient.Post was just called")
	}
	callInfo := struct {
		URL         string
		ContentType string
		Body        io.Reader
	}{
		URL:         url,
		ContentType: contentType,
		Body:        body,
	}
	mock.lockPost.Lock()
	mock.calls.Post = append(mock.calls.Post, callInfo)
	mock.lockPost.Unlock()
	return mock.PostFunc(url, contentType, body)
}

// PostCalls gets all the calls that were made to Post.
// Check the length with:
//
//	len(mockedHTTPClient.PostCalls())
func (mock *MoqHTTPClient) PostCalls() []struct {
	URL         string
	ContentType string
	Body        io.Reader
} {
	var calls []struct {
		URL         string
		ContentType string
		Body        io.Reader
	}
	mock.lockPost.RLock()
	calls = mock.calls.Post
	mock.lockPost.RUnlock()
	return calls
}
