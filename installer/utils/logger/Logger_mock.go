// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: matryer

package logger

import (
	"sync"
)

// Ensure that MoqLogger does implement Logger.
// If this is not the case, regenerate this file with mockery.
var _ Logger = &MoqLogger{}

// MoqLogger is a mock implementation of Logger.
//
//	func TestSomethingThatUsesLogger(t *testing.T) {
//
//		// make and configure a mocked Logger
//		mockedLogger := &MoqLogger{
//			DebugFunc: func(format string, args ...any)  {
//				panic("mock out the Debug method")
//			},
//			ErrorFunc: func(format string, args ...any)  {
//				panic("mock out the Error method")
//			},
//			InfoFunc: func(format string, args ...any)  {
//				panic("mock out the Info method")
//			},
//			SuccessFunc: func(format string, args ...any)  {
//				panic("mock out the Success method")
//			},
//			WarningFunc: func(format string, args ...any)  {
//				panic("mock out the Warning method")
//			},
//		}
//
//		// use mockedLogger in code that requires Logger
//		// and then make assertions.
//
//	}
type MoqLogger struct {
	// DebugFunc mocks the Debug method.
	DebugFunc func(format string, args ...any)

	// ErrorFunc mocks the Error method.
	ErrorFunc func(format string, args ...any)

	// InfoFunc mocks the Info method.
	InfoFunc func(format string, args ...any)

	// SuccessFunc mocks the Success method.
	SuccessFunc func(format string, args ...any)

	// WarningFunc mocks the Warning method.
	WarningFunc func(format string, args ...any)

	// calls tracks calls to the methods.
	calls struct {
		// Debug holds details about calls to the Debug method.
		Debug []struct {
			// Format is the format argument value.
			Format string
			// Args is the args argument value.
			Args []any
		}
		// Error holds details about calls to the Error method.
		Error []struct {
			// Format is the format argument value.
			Format string
			// Args is the args argument value.
			Args []any
		}
		// Info holds details about calls to the Info method.
		Info []struct {
			// Format is the format argument value.
			Format string
			// Args is the args argument value.
			Args []any
		}
		// Success holds details about calls to the Success method.
		Success []struct {
			// Format is the format argument value.
			Format string
			// Args is the args argument value.
			Args []any
		}
		// Warning holds details about calls to the Warning method.
		Warning []struct {
			// Format is the format argument value.
			Format string
			// Args is the args argument value.
			Args []any
		}
	}
	lockDebug   sync.RWMutex
	lockError   sync.RWMutex
	lockInfo    sync.RWMutex
	lockSuccess sync.RWMutex
	lockWarning sync.RWMutex
}

// Debug calls DebugFunc.
func (mock *MoqLogger) Debug(format string, args ...any) {
	if mock.DebugFunc == nil {
		panic("MoqLogger.DebugFunc: method is nil but Logger.Debug was just called")
	}
	callInfo := struct {
		Format string
		Args   []any
	}{
		Format: format,
		Args:   args,
	}
	mock.lockDebug.Lock()
	mock.calls.Debug = append(mock.calls.Debug, callInfo)
	mock.lockDebug.Unlock()
	mock.DebugFunc(format, args...)
}

// DebugCalls gets all the calls that were made to Debug.
// Check the length with:
//
//	len(mockedLogger.DebugCalls())
func (mock *MoqLogger) DebugCalls() []struct {
	Format string
	Args   []any
} {
	var calls []struct {
		Format string
		Args   []any
	}
	mock.lockDebug.RLock()
	calls = mock.calls.Debug
	mock.lockDebug.RUnlock()
	return calls
}

// Error calls ErrorFunc.
func (mock *MoqLogger) Error(format string, args ...any) {
	if mock.ErrorFunc == nil {
		panic("MoqLogger.ErrorFunc: method is nil but Logger.Error was just called")
	}
	callInfo := struct {
		Format string
		Args   []any
	}{
		Format: format,
		Args:   args,
	}
	mock.lockError.Lock()
	mock.calls.Error = append(mock.calls.Error, callInfo)
	mock.lockError.Unlock()
	mock.ErrorFunc(format, args...)
}

// ErrorCalls gets all the calls that were made to Error.
// Check the length with:
//
//	len(mockedLogger.ErrorCalls())
func (mock *MoqLogger) ErrorCalls() []struct {
	Format string
	Args   []any
} {
	var calls []struct {
		Format string
		Args   []any
	}
	mock.lockError.RLock()
	calls = mock.calls.Error
	mock.lockError.RUnlock()
	return calls
}

// Info calls InfoFunc.
func (mock *MoqLogger) Info(format string, args ...any) {
	if mock.InfoFunc == nil {
		panic("MoqLogger.InfoFunc: method is nil but Logger.Info was just called")
	}
	callInfo := struct {
		Format string
		Args   []any
	}{
		Format: format,
		Args:   args,
	}
	mock.lockInfo.Lock()
	mock.calls.Info = append(mock.calls.Info, callInfo)
	mock.lockInfo.Unlock()
	mock.InfoFunc(format, args...)
}

// InfoCalls gets all the calls that were made to Info.
// Check the length with:
//
//	len(mockedLogger.InfoCalls())
func (mock *MoqLogger) InfoCalls() []struct {
	Format string
	Args   []any
} {
	var calls []struct {
		Format string
		Args   []any
	}
	mock.lockInfo.RLock()
	calls = mock.calls.Info
	mock.lockInfo.RUnlock()
	return calls
}

// Success calls SuccessFunc.
func (mock *MoqLogger) Success(format string, args ...any) {
	if mock.SuccessFunc == nil {
		panic("MoqLogger.SuccessFunc: method is nil but Logger.Success was just called")
	}
	callInfo := struct {
		Format string
		Args   []any
	}{
		Format: format,
		Args:   args,
	}
	mock.lockSuccess.Lock()
	mock.calls.Success = append(mock.calls.Success, callInfo)
	mock.lockSuccess.Unlock()
	mock.SuccessFunc(format, args...)
}

// SuccessCalls gets all the calls that were made to Success.
// Check the length with:
//
//	len(mockedLogger.SuccessCalls())
func (mock *MoqLogger) SuccessCalls() []struct {
	Format string
	Args   []any
} {
	var calls []struct {
		Format string
		Args   []any
	}
	mock.lockSuccess.RLock()
	calls = mock.calls.Success
	mock.lockSuccess.RUnlock()
	return calls
}

// Warning calls WarningFunc.
func (mock *MoqLogger) Warning(format string, args ...any) {
	if mock.WarningFunc == nil {
		panic("MoqLogger.WarningFunc: method is nil but Logger.Warning was just called")
	}
	callInfo := struct {
		Format string
		Args   []any
	}{
		Format: format,
		Args:   args,
	}
	mock.lockWarning.Lock()
	mock.calls.Warning = append(mock.calls.Warning, callInfo)
	mock.lockWarning.Unlock()
	mock.WarningFunc(format, args...)
}

// WarningCalls gets all the calls that were made to Warning.
// Check the length with:
//
//	len(mockedLogger.WarningCalls())
func (mock *MoqLogger) WarningCalls() []struct {
	Format string
	Args   []any
} {
	var calls []struct {
		Format string
		Args   []any
	}
	mock.lockWarning.RLock()
	calls = mock.calls.Warning
	mock.lockWarning.RUnlock()
	return calls
}
