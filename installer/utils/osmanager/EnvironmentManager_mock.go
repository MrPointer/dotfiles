// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: matryer

package osmanager

import (
	"sync"
)

// Ensure that MoqEnvironmentManager does implement EnvironmentManager.
// If this is not the case, regenerate this file with mockery.
var _ EnvironmentManager = &MoqEnvironmentManager{}

// MoqEnvironmentManager is a mock implementation of EnvironmentManager.
//
//	func TestSomethingThatUsesEnvironmentManager(t *testing.T) {
//
//		// make and configure a mocked EnvironmentManager
//		mockedEnvironmentManager := &MoqEnvironmentManager{
//			GetenvFunc: func(key string) string {
//				panic("mock out the Getenv method")
//			},
//		}
//
//		// use mockedEnvironmentManager in code that requires EnvironmentManager
//		// and then make assertions.
//
//	}
type MoqEnvironmentManager struct {
	// GetenvFunc mocks the Getenv method.
	GetenvFunc func(key string) string

	// calls tracks calls to the methods.
	calls struct {
		// Getenv holds details about calls to the Getenv method.
		Getenv []struct {
			// Key is the key argument value.
			Key string
		}
	}
	lockGetenv sync.RWMutex
}

// Getenv calls GetenvFunc.
func (mock *MoqEnvironmentManager) Getenv(key string) string {
	if mock.GetenvFunc == nil {
		panic("MoqEnvironmentManager.GetenvFunc: method is nil but EnvironmentManager.Getenv was just called")
	}
	callInfo := struct {
		Key string
	}{
		Key: key,
	}
	mock.lockGetenv.Lock()
	mock.calls.Getenv = append(mock.calls.Getenv, callInfo)
	mock.lockGetenv.Unlock()
	return mock.GetenvFunc(key)
}

// GetenvCalls gets all the calls that were made to Getenv.
// Check the length with:
//
//	len(mockedEnvironmentManager.GetenvCalls())
func (mock *MoqEnvironmentManager) GetenvCalls() []struct {
	Key string
} {
	var calls []struct {
		Key string
	}
	mock.lockGetenv.RLock()
	calls = mock.calls.Getenv
	mock.lockGetenv.RUnlock()
	return calls
}
