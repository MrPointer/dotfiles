// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: matryer

package osmanager

import (
	"sync"
)

// Ensure that MoqFilePermissionManager does implement FilePermissionManager.
// If this is not the case, regenerate this file with mockery.
var _ FilePermissionManager = &MoqFilePermissionManager{}

// MoqFilePermissionManager is a mock implementation of FilePermissionManager.
//
//	func TestSomethingThatUsesFilePermissionManager(t *testing.T) {
//
//		// make and configure a mocked FilePermissionManager
//		mockedFilePermissionManager := &MoqFilePermissionManager{
//			SetOwnershipFunc: func(path string, username string) error {
//				panic("mock out the SetOwnership method")
//			},
//		}
//
//		// use mockedFilePermissionManager in code that requires FilePermissionManager
//		// and then make assertions.
//
//	}
type MoqFilePermissionManager struct {
	// SetOwnershipFunc mocks the SetOwnership method.
	SetOwnershipFunc func(path string, username string) error

	// calls tracks calls to the methods.
	calls struct {
		// SetOwnership holds details about calls to the SetOwnership method.
		SetOwnership []struct {
			// Path is the path argument value.
			Path string
			// Username is the username argument value.
			Username string
		}
	}
	lockSetOwnership sync.RWMutex
}

// SetOwnership calls SetOwnershipFunc.
func (mock *MoqFilePermissionManager) SetOwnership(path string, username string) error {
	if mock.SetOwnershipFunc == nil {
		panic("MoqFilePermissionManager.SetOwnershipFunc: method is nil but FilePermissionManager.SetOwnership was just called")
	}
	callInfo := struct {
		Path     string
		Username string
	}{
		Path:     path,
		Username: username,
	}
	mock.lockSetOwnership.Lock()
	mock.calls.SetOwnership = append(mock.calls.SetOwnership, callInfo)
	mock.lockSetOwnership.Unlock()
	return mock.SetOwnershipFunc(path, username)
}

// SetOwnershipCalls gets all the calls that were made to SetOwnership.
// Check the length with:
//
//	len(mockedFilePermissionManager.SetOwnershipCalls())
func (mock *MoqFilePermissionManager) SetOwnershipCalls() []struct {
	Path     string
	Username string
} {
	var calls []struct {
		Path     string
		Username string
	}
	mock.lockSetOwnership.RLock()
	calls = mock.calls.SetOwnership
	mock.lockSetOwnership.RUnlock()
	return calls
}
