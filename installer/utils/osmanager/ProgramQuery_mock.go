// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: matryer

package osmanager

import (
	"sync"
)

// Ensure that MoqProgramQuery does implement ProgramQuery.
// If this is not the case, regenerate this file with mockery.
var _ ProgramQuery = &MoqProgramQuery{}

// MoqProgramQuery is a mock implementation of ProgramQuery.
//
//	func TestSomethingThatUsesProgramQuery(t *testing.T) {
//
//		// make and configure a mocked ProgramQuery
//		mockedProgramQuery := &MoqProgramQuery{
//			GetProgramPathFunc: func(program string) (string, error) {
//				panic("mock out the GetProgramPath method")
//			},
//			GetProgramVersionFunc: func(program string, versionExtractor VersionExtractor, queryArgs ...string) (string, error) {
//				panic("mock out the GetProgramVersion method")
//			},
//			ProgramExistsFunc: func(program string) (bool, error) {
//				panic("mock out the ProgramExists method")
//			},
//		}
//
//		// use mockedProgramQuery in code that requires ProgramQuery
//		// and then make assertions.
//
//	}
type MoqProgramQuery struct {
	// GetProgramPathFunc mocks the GetProgramPath method.
	GetProgramPathFunc func(program string) (string, error)

	// GetProgramVersionFunc mocks the GetProgramVersion method.
	GetProgramVersionFunc func(program string, versionExtractor VersionExtractor, queryArgs ...string) (string, error)

	// ProgramExistsFunc mocks the ProgramExists method.
	ProgramExistsFunc func(program string) (bool, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetProgramPath holds details about calls to the GetProgramPath method.
		GetProgramPath []struct {
			// Program is the program argument value.
			Program string
		}
		// GetProgramVersion holds details about calls to the GetProgramVersion method.
		GetProgramVersion []struct {
			// Program is the program argument value.
			Program string
			// VersionExtractor is the versionExtractor argument value.
			VersionExtractor VersionExtractor
			// QueryArgs is the queryArgs argument value.
			QueryArgs []string
		}
		// ProgramExists holds details about calls to the ProgramExists method.
		ProgramExists []struct {
			// Program is the program argument value.
			Program string
		}
	}
	lockGetProgramPath    sync.RWMutex
	lockGetProgramVersion sync.RWMutex
	lockProgramExists     sync.RWMutex
}

// GetProgramPath calls GetProgramPathFunc.
func (mock *MoqProgramQuery) GetProgramPath(program string) (string, error) {
	if mock.GetProgramPathFunc == nil {
		panic("MoqProgramQuery.GetProgramPathFunc: method is nil but ProgramQuery.GetProgramPath was just called")
	}
	callInfo := struct {
		Program string
	}{
		Program: program,
	}
	mock.lockGetProgramPath.Lock()
	mock.calls.GetProgramPath = append(mock.calls.GetProgramPath, callInfo)
	mock.lockGetProgramPath.Unlock()
	return mock.GetProgramPathFunc(program)
}

// GetProgramPathCalls gets all the calls that were made to GetProgramPath.
// Check the length with:
//
//	len(mockedProgramQuery.GetProgramPathCalls())
func (mock *MoqProgramQuery) GetProgramPathCalls() []struct {
	Program string
} {
	var calls []struct {
		Program string
	}
	mock.lockGetProgramPath.RLock()
	calls = mock.calls.GetProgramPath
	mock.lockGetProgramPath.RUnlock()
	return calls
}

// GetProgramVersion calls GetProgramVersionFunc.
func (mock *MoqProgramQuery) GetProgramVersion(program string, versionExtractor VersionExtractor, queryArgs ...string) (string, error) {
	if mock.GetProgramVersionFunc == nil {
		panic("MoqProgramQuery.GetProgramVersionFunc: method is nil but ProgramQuery.GetProgramVersion was just called")
	}
	callInfo := struct {
		Program          string
		VersionExtractor VersionExtractor
		QueryArgs        []string
	}{
		Program:          program,
		VersionExtractor: versionExtractor,
		QueryArgs:        queryArgs,
	}
	mock.lockGetProgramVersion.Lock()
	mock.calls.GetProgramVersion = append(mock.calls.GetProgramVersion, callInfo)
	mock.lockGetProgramVersion.Unlock()
	return mock.GetProgramVersionFunc(program, versionExtractor, queryArgs...)
}

// GetProgramVersionCalls gets all the calls that were made to GetProgramVersion.
// Check the length with:
//
//	len(mockedProgramQuery.GetProgramVersionCalls())
func (mock *MoqProgramQuery) GetProgramVersionCalls() []struct {
	Program          string
	VersionExtractor VersionExtractor
	QueryArgs        []string
} {
	var calls []struct {
		Program          string
		VersionExtractor VersionExtractor
		QueryArgs        []string
	}
	mock.lockGetProgramVersion.RLock()
	calls = mock.calls.GetProgramVersion
	mock.lockGetProgramVersion.RUnlock()
	return calls
}

// ProgramExists calls ProgramExistsFunc.
func (mock *MoqProgramQuery) ProgramExists(program string) (bool, error) {
	if mock.ProgramExistsFunc == nil {
		panic("MoqProgramQuery.ProgramExistsFunc: method is nil but ProgramQuery.ProgramExists was just called")
	}
	callInfo := struct {
		Program string
	}{
		Program: program,
	}
	mock.lockProgramExists.Lock()
	mock.calls.ProgramExists = append(mock.calls.ProgramExists, callInfo)
	mock.lockProgramExists.Unlock()
	return mock.ProgramExistsFunc(program)
}

// ProgramExistsCalls gets all the calls that were made to ProgramExists.
// Check the length with:
//
//	len(mockedProgramQuery.ProgramExistsCalls())
func (mock *MoqProgramQuery) ProgramExistsCalls() []struct {
	Program string
} {
	var calls []struct {
		Program string
	}
	mock.lockProgramExists.RLock()
	calls = mock.calls.ProgramExists
	mock.lockProgramExists.RUnlock()
	return calls
}
