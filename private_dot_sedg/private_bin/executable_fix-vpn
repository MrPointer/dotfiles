#!/bin/sh

show_usage() {
    cat <<TEMPLATE_USAGE
Usage: $v_PROGRAM_NAME [OPTION]... [ARGUMENT]...

Control VPN networking for WSL machines by bringing up or down VPN-related network-interface settings.

Example: 
  $v_PROGRAM_NAME up - Bring VPN "up"
  $v_PROGRAM_NAME down - Bring VPN "down"

Options:
  -h, --help        Show this message and exit
  -v, --verbose     Enable verbose output

Arguments:
  $v_VPN_UP_ARGUMENT_NAME        Bring VPN "up"
  $v_VPN_DOWN_ARGUMENT_NAME      Bring VPN "down"
-----------------------------------------------------"
TEMPLATE_USAGE
}

###
# Set default color codes for colorful prints
###
v_RED_COLOR="\033[0;31m"
v_GREEN_COLOR="\033[0;32m"
v_YELLOW_COLOR="\033[1;33m"
v_BLUE_COLOR="\033[0;34m"
v_NEUTRAL_COLOR="\033[0m"

error() {
    printf "${v_RED_COLOR}%s${v_NEUTRAL_COLOR}\n" "$@"
}

warning() {
    printf "${v_YELLOW_COLOR}%s${v_NEUTRAL_COLOR}\n" "$@"
}

info() {
    printf "${v_BLUE_COLOR}%s${v_NEUTRAL_COLOR}\n" "$@"
}

success() {
    printf "${v_GREEN_COLOR}%s${v_NEUTRAL_COLOR}\n" "$@"
}

###
# Bring VPN down by restoring net adapter's MTU settings.
###
_bring_vpn_down() {
    ip link set dev eth0 mtu 1500
}

###
# Bring VPN up by modifying net adapter's MTU settings.
###
_bring_vpn_up() {
    ip link set dev eth0 mtu 1350
}

control_vpn() {
    if [ $# -eq 0 ]; then
        # Nothing to do, show usage/help and exit
        show_usage
        return 0
    elif [ $# -gt 1 ]; then
        error "Unexpected number of arguments: $# (expected 1)"
        return 1
    fi
    v_ACTION="$1"

    case "${v_ACTION}" in
    "$v_VPN_UP_ARGUMENT_NAME")
        if ! _bring_vpn_up; then
            error "Failed bringing VPN up"
            return 2
        fi
        ;;
    "$v_VPN_DOWN_ARGUMENT_NAME")
        if ! _bring_vpn_down; then
            error "Failed bringing VPN down"
            return 3
        fi
        ;;
    *)
        warning "Unsupported action: $v_ACTION"
        return 1
        ;;
    esac

    return 0
}

###
# Set global variables.
###
set_globals() {
    :
}

###
# Parse arguments/options by traversing all input arguments.
###
parse_arguments() {
    while [ "$#" -gt 0 ]; do
        case $1 in
        -h | --help)
            show_usage
            exit 0
            ;;
        -v | --verbose)
            v_VERBOSE=true
            shift
            ;;
        *)
            # Unrecognizable options, skip (or treat as positional argument)
            shift
            ;;
        esac
    done
}

_set_vpn_control_defaults() {
    v_VPN_UP_ARGUMENT_NAME="up"
    v_VPN_DOWN_ARGUMENT_NAME="down"
}

###
# Set default values to be used throughout the script (global variables).
###
set_defaults() {
    v_VERBOSE=false

    ! _set_vpn_control_defaults && return 1
    return 0
}

main() {
    case "$(uname -s)" in
    Linux*) v_READLINK_PROGRAM="readlink" ;;
    Darwin*) v_READLINK_PROGRAM="greadlink" ;;
    esac

    v_PROGRAM_PATH="$($v_READLINK_PROGRAM -f "$0")"
    v_PROGRAM_NAME="$(basename "$v_PROGRAM_PATH")"
    v_PROGRAM_DIR="$(dirname "$v_PROGRAM_PATH")"

    if ! set_defaults; then
        error "Failed setting defaults, aborting"
        return 1
    fi

    if ! parse_arguments "$@"; then
        error "Failed parsing arguments, aborting"
        return 2
    fi

    if ! set_globals; then
        error "Failed setting globals, aborting"
        return 3
    fi

    control_vpn "$@"
}

# Call main and don't do anything else
# It will pass the correct exit code to the OS
main "$@"
