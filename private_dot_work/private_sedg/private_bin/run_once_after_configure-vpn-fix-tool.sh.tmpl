{{- if eq .chezmoi.os "linux" -}}
{{-   if (.chezmoi.kernel.osrelease | lower | contains "microsoft") -}}
#!/bin/bash

function show_usage {
    cat <<CONFIGURE_VPN_FIXES_USAGE
Usage: $PROGRAM_NAME [OPTION]... 

Configures vpn fixing tool for further usage

Example: $PROGRAM_NAME

Options:
  -h, --help        Show this message and exit
-----------------------------------------------------"
CONFIGURE_VPN_FIXES_USAGE
}

###
# Set default color codes for colorful prints
###
v_RED_COLOR="\033[0;31m"
v_GREEN_COLOR="\033[0;32m"
v_YELLOW_COLOR="\033[1;33m"
v_BLUE_COLOR="\033[0;34m"
v_NEUTRAL_COLOR="\033[0m"

function error {
    printf "${v_RED_COLOR}%s${v_NEUTRAL_COLOR}\n" "$@"
}

function warning {
    printf "${v_YELLOW_COLOR}%s${v_NEUTRAL_COLOR}\n" "$@"
}

function success {
    printf "${v_GREEN_COLOR}%s${v_NEUTRAL_COLOR}\n" "$@"
}

function info {
    printf "${v_BLUE_COLOR}%s${v_NEUTRAL_COLOR}\n" "$@"
}

function _enable_sudo_access {
    sudo tee "$FIX_TOOL_SUDOERS_FILE" <<VPN_FIX_TOOL_SUDO_CONTENT >/dev/null
$USER ALL = NOPASSWD: $FIX_TOOL_LINK_TARGET
VPN_FIX_TOOL_SUDO_CONTENT
}

function _link_system_files {
    sudo ln -sf "$SEDG_FIX_VPN_EXECUTABLE_PATH" "$FIX_TOOL_LINK_TARGET"
}

function _migrate_old_config {
    sudo rm -rf "$OLD_FIX_TOOL_SUDOERS_FILE"
    sudo rm -rf "${OLD_FIX_TOOL_LINK_TARGETS[@]}"
}

###
# Configures vpn fix-tool
###
function configure_vpn_fix_tool {
    info "Migrating old config (if any)"
    if ! _migrate_old_config; then
        error "Failed migrating old config"
        return 1
    fi
    success "Successfully migrated old config"

    info "Linking vpn fix-tool to system dirs"
    if ! _link_system_files; then
        error "Failed linking vpn fix-tool to system dirs"
        return 2
    fi
    success "Successfully linked vpn fix-tool"

    info "Enabling sudo access for the vpn fix-tool"
    if ! _enable_sudo_access; then
        error "Failed enabling sudo access for the vpn fix-tool"
        return 3
    fi
    success "Successfully enabled sudo access for the vpn fix-tool"
    return 0
}

###
# Set global variables
###
function set_globals {
    # Get sedg profile's vars
    source {{ .system.work_generic_dotfiles_profile }}

    FIX_TOOL_LINK_TARGET="${FIX_TOOL_LINK_TARGET_DIR}/${SEDG_FIX_VPN_EXECUTABLE_NAME}"
}

###
# Set default values to be used throughout the script (global variables).
###
function set_defaults {
    FIX_TOOL_LINK_TARGET_DIR="/usr/local/bin"
    OLD_FIX_TOOL_LINK_TARGETS=("$FIX_TOOL_LINK_TARGET_DIR/vpn-up" "$FIX_TOOL_LINK_TARGET_DIR/vpn-down")

    SUDOERS_DIR="/etc/sudoers.d"
    FIX_TOOL_SUDOERS_FILE="$SUDOERS_DIR/vpn-fix-tool"
    OLD_FIX_TOOL_SUDOERS_FILE="$SUDOERS_DIR/vpn-mtu"
}

function main {
    case "$(uname -s)" in
    Linux*) v_READLINK_PROGRAM="readlink" ;;
    Darwin*) v_READLINK_PROGRAM="greadlink" ;;
    esac

    v_PROGRAM_PATH="$($v_READLINK_PROGRAM -f "$0")"
    v_PROGRAM_NAME="$(basename "$v_PROGRAM_PATH")"
    v_PROGRAM_DIR="$(dirname "$v_PROGRAM_PATH")"

    if ! set_defaults; then
        error "Failed setting defaults, aborting"
        return 1
    fi

    if ! set_globals; then
        error "Failed setting globals, aborting"
        return 2
    fi

    info "Configuring vpn fix-tool"
    if ! configure_vpn_fix_tool; then
        error "Failed configuring vpn fix-tool"
        return 3
    fi

    success "Successfully configured vpn fix-tool"
    return 0
}

# Call main and don't do anything else
# It will pass the correct exit code to the OS
main "$@"
{{-   end -}}
{{- end }}
